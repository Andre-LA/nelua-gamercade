-- setup:
##[[
-- Credits note: this code was heavily inspired by wasm4 setup code:
-- https://github.com/aduros/wasm4/blob/main/cli/assets/templates/nelua/src/wasm4.nelua

-- Don't search for the entry point symbol:
-- https://lld.llvm.org/WebAssembly.html#cmdoption-no-entry
ldflags '-Wl,--no-entry'

-- WebAssembly execution model set to reactor (makes `main` not required):
-- https://clang.llvm.org/docs/ClangCommandLineReference.html#cmdoption-clang-mexec-model
cflags '-mexec-model=reactor'

-- "Disable entry point generation for the GC":
-- https://github.com/edubart/nelua-lang/blob/112409b9b54468275a4f4700f04e1b03966994bb/lualib/nelua/typedefs.lua#L238-L247
context.rootpragmas.nogcentry = true

-- "Changes how messages are written to stderr when a runtime error occur":
-- https://github.com/edubart/nelua-lang/blob/112409b9b54468275a4f4700f04e1b03966994bb/lualib/nelua/typedefs.lua#L238-L247
context.rootpragmas.writestderr = "hooked"

-- "Changes abort semantics"
-- https://github.com/edubart/nelua-lang/blob/112409b9b54468275a4f4700f04e1b03966994bb/lualib/nelua/typedefs.lua#L228-L237
context.rootpragmas.abort = "trap"
]]

## function setup_gamercade_callbacks(update, draw)
  ## static_assert(update, 'please pass the `update` function!')
  ## static_assert(draw, 'please pass the `draw` function!')

  -- hook application entry point
  local function init(): void <cexport, codename'init', cattribute'export_name("init")', entrypoint>
    -- If enabled, the GC should be initialized as the first thing
    ## if not pragmas.nogc then
      gc:init(nilptr)
    ## end

    -- This will run all the code in the top scopes
    local function nelua_main(argc: cint, argv: *cstring): cint <cimport,nodecl> end
    nelua_main(0, nilptr)
  end

  local function _update(): void <cexport, codename'update', cattribute'export_name("update")'>
    #[update]#()

    ## if not pragmas.nogc then
      -- We must always manually call garbage collection in the end of every frame.
      -- This is the only safe point to do so, because in WASM we cannot scan the function stack.
      gc:step()
    ## end
  end

  local function _draw(): void <cexport, codename'draw', cattribute'export_name("draw")'>
    #[draw]#()
  end
## end

-- Audio: https://gamercade.io/docs/api-reference/audio
global function play_bgm(bgm_index: int32) <cimport, cattribute'import_name("play_bgm")'> end
global function play_sfx(sfx_index: int32, channel: int32) <cimport, cattribute'import_name("play_sfx")'> end
global function bgm_is_active(): int32 <cimport, cattribute'import_name("bgm_is_active")'> end
global function channel_is_active(channel: int32): int32 <cimport, cattribute'import_name("channel_is_active")'> end
global function stop_bgm() <cimport, cattribute'import_name("stop_bgm")'> end
global function stop_channel(channel: int32) <cimport, cattribute'import_name("stop_channel")'> end
global function play_note(note_id: int32, instrument_index: int32, channel: int32) <cimport, cattribute'import_name("play_note")'> end
global function play_frequency(frequency: float32, instrument_index: int32, channel: int32) <cimport, cattribute'import_name("play_frequency")'> end

-- Graphics Parameters: https://gamercade.io/docs/api-reference/graphics-parameters
global function palette_index(palette_index: int32): int32 <cimport, cattribute'import_name("palette_index")'> end
global function sprite_sheet_index(sprite_sheet_index: int32): int32 <cimport, cattribute'import_name("sprite_sheet_index")'> end
global function sprite_index(sprite_index: int32): int32 <cimport, cattribute'import_name("sprite_index")'> end
global function color_index(color_index: int32): int32 <cimport, cattribute'import_name("color_index")'> end
global function flip_x(flip_x: int32): int32 <cimport, cattribute'import_name("flip_x")'> end
global function flip_y(flip_y: int32): int32 <cimport, cattribute'import_name("flip_y")'> end
global function graphics_parameters(palette_index: int32, sprite_sheet_index: int32, sprite_index: int32, color_index: int32, flip_x: int32, flip_y: int32): int32 <cimport, cattribute'import_name("graphics_parameters")'> end

-- Draw: https://gamercade.io/docs/api-reference/draw
global function clear_screen(graphics_parameters: int32) <cimport, cattribute'import_name("clear_screen")'> end
global function set_pixel(graphics_parameters: int32, x: int32, y: int32) <cimport, cattribute'import_name("set_pixel")'> end
global function circle(graphics_parameters: int32, x: int32, y: int32, radius: int32) <cimport, cattribute'import_name("circle")'> end
global function circle_filled(graphics_parameters: int32, x: int32, y: int32, radius: int32) <cimport, cattribute'import_name("circle_filled")'> end
global function rect(graphics_parameters: int32, x: int32, y: int32, width: int32, height: int32) <cimport, cattribute'import_name("rect")'> end
global function rect_filled(graphics_parameters: int32, x: int32, y: int32, width: int32, height: int32) <cimport, cattribute'import_name("rect_filled")'> end
global function line(graphics_parameters: int32, x0: int32, y0: int32, x1: int32, y1: int32) <cimport, cattribute'import_name("line")'> end
global function sprite(graphics_parameters: int32, transparency_mask: int64, x: int32, y: int32) <cimport, cattribute'import_name("sprite")'> end

-- Text: https://gamercade.io/docs/api-reference/text
global function console_log(text_ptr: pointer, len: int32) <cimport, cattribute'import_name("console_log")'> end
global function draw_text(text_ptr: pointer, len: int32, x: int32, y: int32) <cimport, cattribute'import_name("draw_text")'> end

-- Random: https://gamercade.io/docs/api-reference/random
global function set_seed(seed: int32) <cimport, cattribute'import_name("set_seed")'> end
global function random_int_range(min: int32, max: int32): int32 <cimport, cattribute'import_name("random_int_range")'> end
global function random_float(): float32 <cimport, cattribute'import_name("random_float")'> end
global function random_float_range(min: float32, max: float32): float32 <cimport, cattribute'import_name("random_float_range")'> end

-- Input: https://gamercade.io/docs/api-reference/input
global function button_a_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_a_pressed")'> end
global function button_a_released(player_id: int32): int32 <cimport, cattribute'import_name("button_a_released")'> end
global function button_a_held(player_id: int32): int32 <cimport, cattribute'import_name("button_a_held")'> end
global function button_b_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_b_pressed")'> end
global function button_b_released(player_id: int32): int32 <cimport, cattribute'import_name("button_b_released")'> end
global function button_b_held(player_id: int32): int32 <cimport, cattribute'import_name("button_b_held")'> end
global function button_c_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_c_pressed")'> end
global function button_c_released(player_id: int32): int32 <cimport, cattribute'import_name("button_c_released")'> end
global function button_c_held(player_id: int32): int32 <cimport, cattribute'import_name("button_c_held")'> end
global function button_d_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_d_pressed")'> end
global function button_d_released(player_id: int32): int32 <cimport, cattribute'import_name("button_d_released")'> end
global function button_d_held(player_id: int32): int32 <cimport, cattribute'import_name("button_d_held")'> end
global function button_up_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_up_pressed")'> end
global function button_up_released(player_id: int32): int32 <cimport, cattribute'import_name("button_up_released")'> end
global function button_up_held(player_id: int32): int32 <cimport, cattribute'import_name("button_up_held")'> end
global function button_down_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_down_pressed")'> end
global function button_down_released(player_id: int32): int32 <cimport, cattribute'import_name("button_down_released")'> end
global function button_down_held(player_id: int32): int32 <cimport, cattribute'import_name("button_down_held")'> end
global function button_left_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_left_pressed")'> end
global function button_left_released(player_id: int32): int32 <cimport, cattribute'import_name("button_left_released")'> end
global function button_left_held(player_id: int32): int32 <cimport, cattribute'import_name("button_left_held")'> end
global function button_right_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_right_pressed")'> end
global function button_right_released(player_id: int32): int32 <cimport, cattribute'import_name("button_right_released")'> end
global function button_right_held(player_id: int32): int32 <cimport, cattribute'import_name("button_right_held")'> end
global function button_start_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_start_pressed")'> end
global function button_start_released(player_id: int32): int32 <cimport, cattribute'import_name("button_start_released")'> end
global function button_start_held(player_id: int32): int32 <cimport, cattribute'import_name("button_start_held")'> end
global function button_select_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_select_pressed")'> end
global function button_select_released(player_id: int32): int32 <cimport, cattribute'import_name("button_select_released")'> end
global function button_select_held(player_id: int32): int32 <cimport, cattribute'import_name("button_select_held")'> end
global function button_left_shoulder_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_left_shoulder_pressed")'> end
global function button_left_shoulder_released(player_id: int32): int32 <cimport, cattribute'import_name("button_left_shoulder_released")'> end
global function button_left_shoulder_held(player_id: int32): int32 <cimport, cattribute'import_name("button_left_shoulder_held")'> end
global function button_right_shoulder_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_right_shoulder_pressed")'> end
global function button_right_shoulder_released(player_id: int32): int32 <cimport, cattribute'import_name("button_right_shoulder_released")'> end
global function button_right_shoulder_held(player_id: int32): int32 <cimport, cattribute'import_name("button_right_shoulder_held")'> end
global function button_left_stick_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_left_stick_pressed")'> end
global function button_left_stick_released(player_id: int32): int32 <cimport, cattribute'import_name("button_left_stick_released")'> end
global function button_left_stick_held(player_id: int32): int32 <cimport, cattribute'import_name("button_left_stick_held")'> end
global function button_right_stick_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_right_stick_pressed")'> end
global function button_right_stick_released(player_id: int32): int32 <cimport, cattribute'import_name("button_right_stick_released")'> end
global function button_right_stick_held(player_id: int32): int32 <cimport, cattribute'import_name("button_right_stick_held")'> end
global function button_left_trigger_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_left_trigger_pressed")'> end
global function button_left_trigger_released(player_id: int32): int32 <cimport, cattribute'import_name("button_left_trigger_released")'> end
global function button_left_trigger_held(player_id: int32): int32 <cimport, cattribute'import_name("button_left_trigger_held")'> end
global function button_right_trigger_pressed(player_id: int32): int32 <cimport, cattribute'import_name("button_right_trigger_pressed")'> end
global function button_right_trigger_released(player_id: int32): int32 <cimport, cattribute'import_name("button_right_trigger_released")'> end
global function button_right_trigger_held(player_id: int32): int32 <cimport, cattribute'import_name("button_right_trigger_held")'> end
global function analog_left_x(player_id: int32): float32 <cimport, cattribute'import_name("analog_left_x")'> end
global function analog_left_y(player_id: int32): float32 <cimport, cattribute'import_name("analog_left_y")'> end
global function analog_right_x(player_id: int32): float32 <cimport, cattribute'import_name("analog_right_x")'> end
global function analog_right_y(player_id: int32): float32 <cimport, cattribute'import_name("analog_right_y")'> end
global function trigger_left(player_id: int32): float32 <cimport, cattribute'import_name("trigger_left")'> end
global function trigger_right(player_id: int32): float32 <cimport, cattribute'import_name("trigger_right")'> end
global function raw_input_state(played_id: int32): int64 <cimport, cattribute'import_name("raw_input_state")'> end

-- Multiplayer: https://gamercade.io/docs/api-reference/multiplayer
global function num_players(): int32 <cimport, cattribute'import_name("num_players")'> end
-- "WARNING: Using this is possible to desync clients! Make sure you know what you're doing before using these."
global function is_local_player(player_id: int32): int32 <cimport, cattribute'import_name("is_local_player")'> end
global function is_remote_player(player_id: int32): int32 <cimport, cattribute'import_name("is_remote_player")'> end

-- define nelua_write_stderr
local function write_stderr(msg: cstring, len: usize, flush: boolean): void <codename "nelua_write_stderr">
  console_log(msg, #msg)
end

